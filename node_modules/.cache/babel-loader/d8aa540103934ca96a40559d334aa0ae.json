{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/CardDisplay.js\";\nimport React from \"react\";\nimport raw from \"./terms.txt\";\nimport Flashcard from \"./Flashcard\";\n\nclass Flashcards extends React.Component {\n  constructor() {\n    super();\n\n    this.fetchDefinition = term => {\n      const key = \"cb25488e-3745-487a-8e94-4f5892774491\";\n      const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`;\n      fetch(url).then(response => {\n        if (!response.ok) {\n          throw response;\n        }\n\n        return response.json();\n      }).then(data => {\n        const termDefinition = this.parseData(data);\n        this.setState({\n          definition: termDefinition\n        });\n      }).catch(err => {\n        this.setState({\n          definition: \"Error: Incorrect Spelling!\"\n        });\n      });\n    };\n\n    this.parseData = data => {\n      let definitionText = ``;\n      let totalCounter = 1;\n\n      for (let i = 0; i < data.length; i++) {\n        const shortDefArray = data[i].shortdef;\n\n        for (let j = 0; j < shortDefArray.length; j++) {\n          definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`;\n          totalCounter++;\n        }\n      }\n\n      return definitionText;\n    };\n\n    this.shuffleTerms = () => {\n      const shuffledTerms = this.state.allTerms;\n      const totalTerms = shuffledTerms.length; //shuffe algorithm\n\n      for (let i = 0; i < totalTerms; i++) {\n        const random = i + Math.floor(Math.random() * (totalTerms - i));\n        const indexTerm = shuffledTerms[i];\n        shuffledTerms[i] = shuffledTerms[random];\n        shuffledTerms[random] = indexTerm;\n      }\n\n      this.setState({\n        termIndex: 0,\n        allTerms: shuffledTerms,\n        onTerm: true,\n        definition: \"\"\n      });\n    };\n\n    this.flipFlashCard = () => {\n      const onTermSide = this.state.onTerm; //fetch definition\n\n      if (onTermSide) {\n        const term = this.state.allTerms[this.state.termIndex];\n        this.fetchDefinition(term);\n      } //flip flashcard\n\n\n      this.setState({\n        onTerm: !onTermSide\n      });\n    };\n\n    this.lastTerm = () => {\n      if (this.state.termIndex > 0) {\n        this.setState({\n          termIndex: this.state.termIndex - 1,\n          onTerm: true,\n          definition: \"\"\n        });\n      }\n    };\n\n    this.nextTerm = () => {\n      if (this.state.termIndex < this.state.allTerms.length - 1) {\n        this.setState({\n          termIndex: this.state.termIndex + 1,\n          onTerm: true,\n          definition: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      termIndex: 0,\n      definition: \"\",\n      onTerm: true,\n      allTerms: [],\n      isLoading: false,\n      dictionary: {}\n    };\n  }\n\n  componentDidMount() {\n    //import terms txt file + shuffle\n    fetch(raw).then(response => response.text()).then(text => {\n      const terms = text.split(\"\\n\");\n      const trimTerms = terms.map(term => term.trim());\n      this.setState({\n        allTerms: trimTerms\n      });\n    }).then(() => {\n      this.shuffleTerms();\n    }); //build dictionary\n\n    let dict = {};\n    dict[\"hi\"] = \"bye\";\n    console.log(\"Dictionary\", dict);\n    this.setState({\n      dictionary: dict\n    }); //make flashcard class\n  } //try catch words like empty space - update text file?\n  //fetch definitions before flip\n  //reorder files\n  //add + delete words\n\n\n  render() {\n    const {\n      termIndex,\n      definition,\n      onTerm,\n      allTerms\n    } = this.state;\n    const indexText = `${termIndex + 1} / ${allTerms.length}`;\n    const flashcardText = onTerm ? allTerms[termIndex] : definition;\n    const flashcardStyle = onTerm ? \"Flashcard TermText\" : \"Flashcard DefinitionText\";\n    const backButtonStyle = termIndex > 0 ? \"Button\" : \"ButtonInactive\";\n    const nextButtonStyle = termIndex < allTerms.length - 1 ? \"Button\" : \"ButtonInactive\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"IndexText\",\n          children: [\" \", indexText, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: flashcardStyle,\n            value: flashcardText,\n            onClick: this.flipFlashCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this), \" \", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Last Button\",\n            className: backButtonStyle,\n            onClick: this.lastTerm,\n            children: \"Back \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Next Button\",\n            className: nextButtonStyle,\n            onClick: this.nextTerm,\n            children: \"Next \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Shuffle Button\",\n            className: \"Button\",\n            onClick: this.shuffleTerms,\n            children: \"Shuffle \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 18\n    }, this);\n  }\n\n}\n\nexport default Flashcards;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/CardDisplay.js"],"names":["React","raw","Flashcard","Flashcards","Component","constructor","fetchDefinition","term","key","url","fetch","then","response","ok","json","data","termDefinition","parseData","setState","definition","catch","err","definitionText","totalCounter","i","length","shortDefArray","shortdef","j","String","shuffleTerms","shuffledTerms","state","allTerms","totalTerms","random","Math","floor","indexTerm","termIndex","onTerm","flipFlashCard","onTermSide","lastTerm","nextTerm","isLoading","dictionary","componentDidMount","text","terms","split","trimTerms","map","trim","dict","console","log","render","indexText","flashcardText","flashcardStyle","backButtonStyle","nextButtonStyle"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,GAAG;AACV;;AADU,SAuCdC,eAvCc,GAuCKC,IAAD,IAAU;AACxB,YAAMC,GAAG,GAAG,sCAAZ;AACA,YAAMC,GAAG,GAAI,mEAAkEF,IAAK,QAAOC,GAAI,EAA/F;AAEAE,MAAAA,KAAK,CAACD,GAAD,CAAL,CACKE,IADL,CACUC,QAAQ,IAAI;AACd,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,gBAAMD,QAAN;AACH;;AACD,eAAOA,QAAQ,CAACE,IAAT,EAAP;AACH,OANL,EAOKH,IAPL,CAOUI,IAAI,IAAI;AACV,cAAMC,cAAc,GAAG,KAAKC,SAAL,CAAeF,IAAf,CAAvB;AACA,aAAKG,QAAL,CAAc;AAAEC,UAAAA,UAAU,EAAEH;AAAd,SAAd;AACH,OAVL,EAWKI,KAXL,CAWWC,GAAG,IAAI;AACV,aAAKH,QAAL,CAAc;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAd;AACH,OAbL;AAcH,KAzDa;;AAAA,SA2DdF,SA3Dc,GA2DDF,IAAD,IAAU;AAClB,UAAIO,cAAc,GAAI,EAAtB;AACA,UAAIC,YAAY,GAAG,CAAnB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,CAACU,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,cAAME,aAAa,GAAGX,IAAI,CAACS,CAAD,CAAJ,CAAQG,QAA9B;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACD,MAAlC,EAA0CG,CAAC,EAA3C,EAA+C;AAC3CN,UAAAA,cAAc,IAAK,GAAEO,MAAM,CAACN,YAAD,CAAe,KAAIG,aAAa,CAACE,CAAD,CAAI,IAA/D;AACAL,UAAAA,YAAY;AACf;AACJ;;AAED,aAAOD,cAAP;AACH,KAzEa;;AAAA,SAgFdQ,YAhFc,GAgFC,MAAM;AACjB,YAAMC,aAAa,GAAG,KAAKC,KAAL,CAAWC,QAAjC;AACA,YAAMC,UAAU,GAAGH,aAAa,CAACN,MAAjC,CAFiB,CAIjB;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,UAApB,EAAgCV,CAAC,EAAjC,EAAqC;AACjC,cAAMW,MAAM,GAAGX,CAAC,GAAGY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,MAAiBD,UAAU,GAAGV,CAA9B,CAAX,CAAnB;AACA,cAAMc,SAAS,GAAGP,aAAa,CAACP,CAAD,CAA/B;AACAO,QAAAA,aAAa,CAACP,CAAD,CAAb,GAAmBO,aAAa,CAACI,MAAD,CAAhC;AACAJ,QAAAA,aAAa,CAACI,MAAD,CAAb,GAAwBG,SAAxB;AACH;;AAED,WAAKpB,QAAL,CAAc;AACVqB,QAAAA,SAAS,EAAE,CADD;AAEVN,QAAAA,QAAQ,EAAEF,aAFA;AAGVS,QAAAA,MAAM,EAAE,IAHE;AAIVrB,QAAAA,UAAU,EAAE;AAJF,OAAd;AAMH,KAlGa;;AAAA,SAqGdsB,aArGc,GAqGE,MAAM;AAClB,YAAMC,UAAU,GAAG,KAAKV,KAAL,CAAWQ,MAA9B,CADkB,CAGlB;;AACA,UAAIE,UAAJ,EAAgB;AACZ,cAAMnC,IAAI,GAAG,KAAKyB,KAAL,CAAWC,QAAX,CAAoB,KAAKD,KAAL,CAAWO,SAA/B,CAAb;AACA,aAAKjC,eAAL,CAAqBC,IAArB;AACH,OAPiB,CASlB;;;AACA,WAAKW,QAAL,CAAc;AAAEsB,QAAAA,MAAM,EAAE,CAACE;AAAX,OAAd;AACH,KAhHa;;AAAA,SAkHdC,QAlHc,GAkHH,MAAM;AACb,UAAI,KAAKX,KAAL,CAAWO,SAAX,GAAuB,CAA3B,EAA8B;AAC1B,aAAKrB,QAAL,CAAc;AACVqB,UAAAA,SAAS,EAAE,KAAKP,KAAL,CAAWO,SAAX,GAAuB,CADxB;AAEVC,UAAAA,MAAM,EAAE,IAFE;AAGVrB,UAAAA,UAAU,EAAE;AAHF,SAAd;AAKH;AACJ,KA1Ha;;AAAA,SA4HdyB,QA5Hc,GA4HH,MAAM;AACb,UAAI,KAAKZ,KAAL,CAAWO,SAAX,GAAuB,KAAKP,KAAL,CAAWC,QAAX,CAAoBR,MAApB,GAA6B,CAAxD,EAA2D;AACvD,aAAKP,QAAL,CAAc;AACVqB,UAAAA,SAAS,EAAE,KAAKP,KAAL,CAAWO,SAAX,GAAuB,CADxB;AAEVC,UAAAA,MAAM,EAAE,IAFE;AAGVrB,UAAAA,UAAU,EAAE;AAHF,SAAd;AAKH;AACJ,KApIa;;AAEV,SAAKa,KAAL,GAAa;AACTO,MAAAA,SAAS,EAAE,CADF;AAETpB,MAAAA,UAAU,EAAE,EAFH;AAGTqB,MAAAA,MAAM,EAAE,IAHC;AAITP,MAAAA,QAAQ,EAAE,EAJD;AAKTY,MAAAA,SAAS,EAAE,KALF;AAMTC,MAAAA,UAAU,EAAE;AANH,KAAb;AAQH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACArC,IAAAA,KAAK,CAACT,GAAD,CAAL,CACKU,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACoC,IAAT,EADtB,EAEKrC,IAFL,CAEUqC,IAAI,IAAI;AACV,YAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,IAAX,CAAd;AACA,YAAMC,SAAS,GAAGF,KAAK,CAACG,GAAN,CAAU7C,IAAI,IAAIA,IAAI,CAAC8C,IAAL,EAAlB,CAAlB;AACA,WAAKnC,QAAL,CAAc;AAAEe,QAAAA,QAAQ,EAAEkB;AAAZ,OAAd;AACH,KANL,EAOKxC,IAPL,CAOU,MAAM;AAAE,WAAKmB,YAAL;AAAqB,KAPvC,EAFgB,CAWhB;;AACA,QAAIwB,IAAI,GAAG,EAAX;AACAA,IAAAA,IAAI,CAAC,IAAD,CAAJ,GAAa,KAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;AACA,SAAKpC,QAAL,CAAc;AAAE4B,MAAAA,UAAU,EAAEQ;AAAd,KAAd,EAfgB,CAiBhB;AAEH,GAhCoC,CAkCrC;AACA;AACA;AACA;;;AAmGAG,EAAAA,MAAM,GAAG;AACL,UAAM;AAAElB,MAAAA,SAAF;AAAapB,MAAAA,UAAb;AAAyBqB,MAAAA,MAAzB;AAAiCP,MAAAA;AAAjC,QAA8C,KAAKD,KAAzD;AAEA,UAAM0B,SAAS,GAAI,GAAEnB,SAAS,GAAC,CAAE,MAAKN,QAAQ,CAACR,MAAO,EAAtD;AACA,UAAMkC,aAAa,GAAGnB,MAAM,GAAGP,QAAQ,CAACM,SAAD,CAAX,GAAyBpB,UAArD;AACA,UAAMyC,cAAc,GAAGpB,MAAM,GAAG,oBAAH,GAA0B,0BAAvD;AAEA,UAAMqB,eAAe,GAAGtB,SAAS,GAAG,CAAZ,GAAgB,QAAhB,GAA2B,gBAAnD;AACA,UAAMuB,eAAe,GAAGvB,SAAS,GAAGN,QAAQ,CAACR,MAAT,GAAkB,CAA9B,GAAkC,QAAlC,GAA6C,gBAArE;AAEA,wBAAS;AACG,MAAA,SAAS,EAAG,MADf;AAAA,8BAED;AAAA,gCAEA;AACM,UAAA,SAAS,EAAG,WADlB;AAAA,0BACkCiC,SADlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAKA;AAAA,kCAEA;AACS,YAAA,SAAS,EAAKE,cADvB;AAEA,YAAA,KAAK,EAAKD,aAFV;AAGA,YAAA,OAAO,EAAK,KAAKlB;AAHjB;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFC,eAsBL;AAAA;AAAA;AAAA;AAAA,cAtBK,eAyBL;AAAA,gCAEA;AAAA,kCAEA;AACO,YAAA,IAAI,EAAG,aADd;AAEJ,YAAA,SAAS,EAAKoB,eAFV;AAGJ,YAAA,OAAO,EAAK,KAAKlB,QAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAWA;AAAA,kCAEA;AACO,YAAA,IAAI,EAAG,aADd;AAEJ,YAAA,SAAS,EAAKmB,eAFV;AAGJ,YAAA,OAAO,EAAK,KAAKlB,QAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBK,eA8CT;AAAA;AAAA;AAAA;AAAA,cA9CS,eAiDL;AAAA,gCAEA;AAAA,kCAEA;AACO,YAAA,IAAI,EAAG,gBADd;AAEJ,YAAA,SAAS,EAAG,QAFR;AAGJ,YAAA,OAAO,EAAK,KAAKd,YAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjDK;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AAgEP;;AAlNwC;;AAqNzC,eAAe3B,UAAf","sourcesContent":["import React from \"react\"\nimport raw from \"./terms.txt\"\nimport Flashcard from \"./Flashcard\"\n\nclass Flashcards extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            termIndex: 0,\n            definition: \"\",\n            onTerm: true,\n            allTerms: [],\n            isLoading: false,\n            dictionary: {}\n        }\n    }\n\n    componentDidMount() {\n        //import terms txt file + shuffle\n        fetch(raw)\n            .then(response => response.text())\n            .then(text => {\n                const terms = text.split(\"\\n\");\n                const trimTerms = terms.map(term => term.trim())\n                this.setState({ allTerms: trimTerms })\n            })\n            .then(() => { this.shuffleTerms() })\n\n        //build dictionary\n        let dict = {}\n        dict[\"hi\"] = \"bye\";\n        console.log(\"Dictionary\", dict)\n        this.setState({ dictionary: dict })\n\n        //make flashcard class\n\n    }\n\n    //try catch words like empty space - update text file?\n    //fetch definitions before flip\n    //reorder files\n    //add + delete words\n\n\n    fetchDefinition = (term) => {\n        const key = \"cb25488e-3745-487a-8e94-4f5892774491\"\n        const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`\n\n        fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw response;\n                }\n                return response.json()\n            })\n            .then(data => {\n                const termDefinition = this.parseData(data)\n                this.setState({ definition: termDefinition })\n            })\n            .catch(err => {\n                this.setState({ definition: \"Error: Incorrect Spelling!\" })\n            })\n    }\n\n    parseData = (data) => {\n        let definitionText = ``\n        let totalCounter = 1\n\n        for (let i = 0; i < data.length; i++) {\n            const shortDefArray = data[i].shortdef\n\n            for (let j = 0; j < shortDefArray.length; j++) {\n                definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`\n                totalCounter++;\n            }\n        }\n\n        return definitionText\n    }\n\n\n\n    //******make definition the terms definition\n\n\n    shuffleTerms = () => {\n        const shuffledTerms = this.state.allTerms\n        const totalTerms = shuffledTerms.length\n\n        //shuffe algorithm\n        for (let i = 0; i < totalTerms; i++) {\n            const random = i + Math.floor(Math.random() * (totalTerms - i));\n            const indexTerm = shuffledTerms[i];\n            shuffledTerms[i] = shuffledTerms[random];\n            shuffledTerms[random] = indexTerm;\n        }\n\n        this.setState({\n            termIndex: 0,\n            allTerms: shuffledTerms,\n            onTerm: true,\n            definition: \"\"\n        })\n    }\n\n\n    flipFlashCard = () => {\n        const onTermSide = this.state.onTerm\n\n        //fetch definition\n        if (onTermSide) {\n            const term = this.state.allTerms[this.state.termIndex]\n            this.fetchDefinition(term)\n        }\n\n        //flip flashcard\n        this.setState({ onTerm: !onTermSide })\n    }\n\n    lastTerm = () => {\n        if (this.state.termIndex > 0) {\n            this.setState({\n                termIndex: this.state.termIndex - 1,\n                onTerm: true,\n                definition: \"\"\n            })\n        }\n    }\n\n    nextTerm = () => {\n        if (this.state.termIndex < this.state.allTerms.length - 1) {\n            this.setState({\n                termIndex: this.state.termIndex + 1,\n                onTerm: true,\n                definition: \"\"\n            })\n        }\n    }\n\n\n    render() {\n        const { termIndex, definition, onTerm, allTerms } = this.state\n\n        const indexText = `${termIndex+1} / ${allTerms.length}`\n        const flashcardText = onTerm ? allTerms[termIndex] : definition\n        const flashcardStyle = onTerm ? \"Flashcard TermText\" : \"Flashcard DefinitionText\"\n\n        const backButtonStyle = termIndex > 0 ? \"Button\" : \"ButtonInactive\"\n        const nextButtonStyle = termIndex < allTerms.length - 1 ? \"Button\" : \"ButtonInactive\"\n\n        return ( <\n                div className = \"Main\" >\n                <\n                label >\n                <\n                label className = \"IndexText\" > { indexText } < /label>\n\n                <\n                label >\n                <\n                textarea className = { flashcardStyle }\n                value = { flashcardText }\n                onClick = { this.flipFlashCard }\n                /> {\n                /* <button \n                                            className=\"Flashcard\" \n                                            onClick={this.flipFlashCard}\n                                        >{flashcardText}</button> */\n            } <\n            /label> < /\n        label >\n\n            <\n            br / >\n\n            <\n            div >\n            <\n            label >\n            <\n            button name = \"Last Button\"\n        className = { backButtonStyle }\n        onClick = { this.lastTerm } >\n            Back < /button> < /\n        label >\n\n            <\n            label >\n            <\n            button name = \"Next Button\"\n        className = { nextButtonStyle }\n        onClick = { this.nextTerm } >\n            Next < /button> < /\n        label > <\n            /div>\n\n        <\n        br / >\n\n            <\n            div >\n            <\n            label >\n            <\n            button name = \"Shuffle Button\"\n        className = \"Button\"\n        onClick = { this.shuffleTerms } >\n            Shuffle < /button> < /\n        label > <\n            /div>\n\n        <\n        /div>\n    )\n}\n}\n\nexport default Flashcards;"]},"metadata":{},"sourceType":"module"}