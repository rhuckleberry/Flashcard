{"ast":null,"code":"class Flashcard {\n  constructor(term) {\n    this.term = term;\n    this.definition = tthis.fetchDefinition(term);\n  }\n\n  get Term() {\n    return this.term;\n  }\n\n  get Definition() {\n    return this.definition;\n  }\n\n  async fetchDefinition(term) {\n    const key = \"cb25488e-3745-487a-8e94-4f5892774491\";\n    const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      return this.parseData(data);\n    } catch (e) {\n      return \"Error\";\n    } // fetch(url)\n    //     .then(response => {\n    //         if (!response.ok) {\n    //             throw response;\n    //         }\n    //         return response.json()\n    //     })\n    //     .then(data => {\n    //         const termDefinition = this.parseData(data)\n    //         this.setState({definition: termDefinition})\n    //     })\n    //     .catch(err => {\n    //         this.setState({definition: \"Error: No such word!\"})\n    //     })\n\n  }\n\n  parseData(data) {\n    let definitionText = ``;\n    let totalCounter = 1;\n\n    for (let i = 0; i < data.length; i++) {\n      const shortDefArray = data[i].shortdef;\n\n      for (let j = 0; j < shortDefArray.length; j++) {\n        definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`;\n        totalCounter++;\n      }\n    }\n\n    return definitionText;\n  }\n\n}\n\nexport default Flashcard;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js"],"names":["Flashcard","constructor","term","definition","tthis","fetchDefinition","Term","Definition","key","url","response","fetch","data","json","parseData","e","definitionText","totalCounter","i","length","shortDefArray","shortdef","j","String"],"mappings":"AAAA,MAAMA,SAAN,CAAgB;AACZC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkBC,KAAK,CAACC,eAAN,CAAsBH,IAAtB,CAAlB;AACH;;AAED,MAAII,IAAJ,GAAW;AACP,WAAO,KAAKJ,IAAZ;AACH;;AAED,MAAIK,UAAJ,GAAiB;AACb,WAAO,KAAKJ,UAAZ;AACH;;AAED,QAAME,eAAN,CAAsBH,IAAtB,EAA4B;AACxB,UAAMM,GAAG,GAAG,sCAAZ;AACA,UAAMC,GAAG,GAAI,mEAAkEP,IAAK,QAAOM,GAAI,EAA/F;;AAEA,QAAG;AACC,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,aAAO,KAAKC,SAAL,CAAeF,IAAf,CAAP;AACH,KAJD,CAIC,OAAMG,CAAN,EAAQ;AACL,aAAO,OAAP;AACH,KAVuB,CAYxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;;AAEDD,EAAAA,SAAS,CAACF,IAAD,EAAO;AACZ,QAAII,cAAc,GAAI,EAAtB;AACA,QAAIC,YAAY,GAAG,CAAnB;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACN,IAAI,CAACO,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,YAAME,aAAa,GAAGR,IAAI,CAACM,CAAD,CAAJ,CAAQG,QAA9B;;AAEA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,aAAa,CAACD,MAA7B,EAAoCG,CAAC,EAArC,EAAwC;AACpCN,QAAAA,cAAc,IAAK,GAAEO,MAAM,CAACN,YAAD,CAAe,KAAIG,aAAa,CAACE,CAAD,CAAI,IAA/D;AACAL,QAAAA,YAAY;AACf;AACJ;;AAED,WAAOD,cAAP;AACH;;AAxDW;;AA4DhB,eAAehB,SAAf","sourcesContent":["class Flashcard {\n    constructor(term) {\n        this.term = term\n        this.definition = tthis.fetchDefinition(term)\n    }\n\n    get Term() {\n        return this.term;\n    }\n\n    get Definition() {\n        return this.definition\n    }\n\n    async fetchDefinition(term) {\n        const key = \"cb25488e-3745-487a-8e94-4f5892774491\"\n        const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`\n\n        try{\n            const response = await fetch(url)\n            const data = await response.json()\n            return this.parseData(data)\n        }catch(e){\n            return \"Error\"\n        }\n\n        // fetch(url)\n        //     .then(response => {\n        //         if (!response.ok) {\n        //             throw response;\n        //         }\n        //         return response.json()\n        //     })\n        //     .then(data => {\n        //         const termDefinition = this.parseData(data)\n        //         this.setState({definition: termDefinition})\n        //     })\n        //     .catch(err => {\n        //         this.setState({definition: \"Error: No such word!\"})\n        //     })\n    }\n\n    parseData(data) {\n        let definitionText = ``\n        let totalCounter = 1\n        \n        for(let i=0; i<data.length;i++){\n            const shortDefArray = data[i].shortdef\n\n            for(let j=0; j<shortDefArray.length;j++){\n                definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`\n                totalCounter++;\n            }\n        }\n\n        return definitionText\n    }\n\n}\n\nexport default Flashcard;"]},"metadata":{},"sourceType":"module"}