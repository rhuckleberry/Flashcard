{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js\";\nimport React from \"react\";\nimport raw from \"./terms.txt\";\n\nclass Flashcards extends React.Component {\n  constructor() {\n    super();\n\n    this.fetchDefinition = () => {};\n\n    this.shuffleTerms = () => {\n      const shuffledTerms = this.state.allTerms;\n      const totalTerms = shuffledTerms.length;\n\n      for (var i = 0; i < totalTerms; i++) {\n        const random = i + Math.floor(Math.random() * (totalTerms - i));\n        const indexTerm = shuffledTerms[i];\n        shuffledTerms[i] = shuffledTerms[random];\n        shuffledTerms[random] = indexTerm;\n      }\n\n      this.setState({\n        termIndex: 0,\n        allTerms: shuffledTerms\n      });\n    };\n\n    this.lastTerm = () => {\n      if (this.state.termIndex > 0) {\n        this.setState({\n          termIndex: this.state.termIndex - 1\n        });\n      }\n    };\n\n    this.nextTerm = () => {\n      if (this.state.termIndex < this.state.allTerms.length - 1) {\n        this.setState({\n          termIndex: this.state.termIndex + 1\n        });\n      }\n    };\n\n    this.handleFlashClick = () => {\n      this.setState(prevState => {\n        return {\n          onTerm: !prevState.onTerm\n        };\n      });\n    };\n\n    this.state = {\n      termIndex: 0,\n      definition: \"definition\",\n      onTerm: true,\n      allTerms: []\n    };\n  }\n\n  componentDidMount() {\n    //import terms txt file\n    fetch(raw).then(response => response.text()).then(text => {\n      const terms = text.split(\"\\n\");\n      this.setState({\n        allTerms: terms\n      });\n    }).then(() => {\n      //shuffle terms\n      this.shuffleTerms();\n    });\n  }\n\n  render() {\n    const {\n      termIndex,\n      definition,\n      onTerm,\n      allTerms\n    } = this.state;\n    const indexText = `${termIndex + 1} / ${allTerms.length}`;\n    const flashcardText = onTerm ? allTerms[termIndex] : definition;\n    const backButtonStyle = termIndex > 0 ? \"Button\" : \"ButtonInactive\";\n    const nextButtonStyle = termIndex < allTerms.length - 1 ? \"Button\" : \"ButtonInactive\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"IndexText\",\n          children: indexText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Flashcard\",\n          onClick: this.handleFlashClick,\n          children: flashcardText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Last Button\",\n            className: backButtonStyle,\n            onClick: this.lastTerm,\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Next Button\",\n            className: nextButtonStyle,\n            onClick: this.nextTerm,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Shuffle Button\",\n            className: \"Button\",\n            onClick: this.shuffleTerms,\n            children: \"Shuffle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Flashcards;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js"],"names":["React","raw","Flashcards","Component","constructor","fetchDefinition","shuffleTerms","shuffledTerms","state","allTerms","totalTerms","length","i","random","Math","floor","indexTerm","setState","termIndex","lastTerm","nextTerm","handleFlashClick","prevState","onTerm","definition","componentDidMount","fetch","then","response","text","terms","split","render","indexText","flashcardText","backButtonStyle","nextButtonStyle"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport raw from \"./terms.txt\"\n\nclass Flashcards extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            termIndex: 0,\n            definition: \"definition\",\n            onTerm: true,\n            allTerms: []\n        }\n    }\n\n    componentDidMount() {\n        //import terms txt file\n        fetch(raw)\n            .then(response => response.text())\n            .then(text => {\n                const terms = text.split(\"\\n\");\n                this.setState({allTerms: terms})\n            })\n            .then(() => {\n                //shuffle terms\n                this.shuffleTerms();\n            })\n    }\n\n    fetchDefinition = () => {\n        \n    }\n\n    shuffleTerms = () => {\n        const shuffledTerms = this.state.allTerms\n        const totalTerms = shuffledTerms.length\n\n        for (var i=0; i<totalTerms; i++){\n            const random = i + Math.floor(Math.random() * (totalTerms-i));\n            const indexTerm = shuffledTerms[i];\n            shuffledTerms[i] = shuffledTerms[random];\n            shuffledTerms[random] = indexTerm;\n        }\n\n        this.setState({\n            termIndex: 0,\n            allTerms: shuffledTerms\n        })\n    }\n\n    lastTerm = () => {\n        if (this.state.termIndex > 0){\n            this.setState({termIndex: this.state.termIndex - 1})\n        }\n    }\n\n    nextTerm = () => {\n        if (this.state.termIndex < this.state.allTerms.length - 1){\n            this.setState({termIndex: this.state.termIndex + 1})\n        }\n    }\n\n    handleFlashClick = () => {\n        this.setState(prevState => {\n            return {\n                onTerm: !prevState.onTerm\n            }\n        })\n    }\n\n    render() {\n        const {termIndex, definition, onTerm, allTerms} = this.state\n\n        const indexText = `${termIndex+1} / ${allTerms.length}`\n        const flashcardText = onTerm ? allTerms[termIndex] : definition\n\n        const backButtonStyle = termIndex>0 ? \"Button\" : \"ButtonInactive\"\n        const nextButtonStyle = termIndex<allTerms.length-1 ? \"Button\" : \"ButtonInactive\"\n\n        return (\n            <div className=\"Main\">\n                <label>\n                    <label className=\"IndexText\">{indexText}</label>\n                    <button \n                        className=\"Flashcard\" \n                        onClick={this.handleFlashClick}\n                    >{flashcardText}</button>\n                </label> \n                \n                <br/>\n\n                <div>\n                    <label>\n                        <button\n                            name=\"Last Button\"\n                            className={backButtonStyle}\n                            onClick={this.lastTerm}\n                        >Back</button>\n                    </label>\n\n                    <label>\n                        <button\n                            name=\"Next Button\"\n                            className={nextButtonStyle}\n                            onClick={this.nextTerm}\n                        >Next</button>\n                    </label>\n                </div>\n\n                <br />\n\n                <div>\n                    <label>\n                    <button\n                            name=\"Shuffle Button\"\n                            className=\"Button\"\n                            onClick={this.shuffleTerms}\n                        >Shuffle</button>\n                    </label>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Flashcards;"]},"metadata":{},"sourceType":"module"}