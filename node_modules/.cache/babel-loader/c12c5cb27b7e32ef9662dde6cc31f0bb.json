{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js\";\nimport React from \"react\";\nimport raw from \"./terms.txt\";\n\nclass Flashcards extends React.Component {\n  constructor() {\n    super();\n\n    this.shuffleTerms = () => {\n      const shuffledTerms = this.state.allTerms;\n      const totalTerms = shuffledTerms.length; //shuffe algorithm\n\n      for (let i = 0; i < totalTerms; i++) {\n        const random = i + Math.floor(Math.random() * (totalTerms - i));\n        const indexTerm = shuffledTerms[i];\n        shuffledTerms[i] = shuffledTerms[random];\n        shuffledTerms[random] = indexTerm;\n      }\n\n      this.setState({\n        termIndex: 0,\n        allTerms: shuffledTerms,\n        onTerm: true\n      });\n    };\n\n    this.fetchDefinition = term => {\n      const key = \"cb25488e-3745-487a-8e94-4f5892774491\";\n      const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`;\n      fetch(url).then(response => response.json()).then(data => {\n        const termDefinition = this.parseData(data);\n        this.setState({\n          definition: termDefinition\n        });\n      });\n    };\n\n    this.parseData = data => {\n      let definitionText = ``;\n      let totalCounter = 1;\n\n      for (let i = 0; i < data.length; i++) {\n        const shortDefArray = data[i].shortdef;\n        let shortDef = ``;\n\n        for (let j = 0; j < shortDefArray.length; j++) {\n          console.log(shortDefArray[j]);\n          shortDef += `${String(totalCounter)}. ${shortDefArray[j]}\\n`;\n          totalCounter++;\n        }\n\n        definitionText += `${shortDef}`;\n      }\n\n      return definitionText;\n    };\n\n    this.flipFlashCard = () => {\n      const onTermSide = this.state.onTerm; //fetch definition\n\n      if (onTermSide) {\n        const term = this.state.allTerms[this.state.termIndex];\n        this.fetchDefinition(term, this.state);\n      } //flip flashcard\n\n\n      this.setState({\n        onTerm: !onTermSide\n      });\n    };\n\n    this.lastTerm = () => {\n      if (this.state.termIndex > 0) {\n        this.setState({\n          termIndex: this.state.termIndex - 1,\n          onTerm: true\n        });\n      }\n    };\n\n    this.nextTerm = () => {\n      if (this.state.termIndex < this.state.allTerms.length - 1) {\n        this.setState({\n          termIndex: this.state.termIndex + 1,\n          onTerm: true\n        });\n      }\n    };\n\n    this.state = {\n      termIndex: 0,\n      definition: \"definition\",\n      onTerm: true,\n      allTerms: []\n    };\n  }\n\n  componentDidMount() {\n    //import terms txt file\n    fetch(raw).then(response => response.text()).then(text => {\n      const terms = text.split(\"\\n\");\n      this.setState({\n        allTerms: terms\n      });\n    }).then(() => {\n      this.shuffleTerms();\n    });\n  }\n\n  render() {\n    const {\n      termIndex,\n      definition,\n      onTerm,\n      allTerms\n    } = this.state;\n    const indexText = `${termIndex + 1} / ${allTerms.length}`;\n    const flashcardText = onTerm ? allTerms[termIndex] : definition;\n    const flashcardStyle = onTerm ? \"Flashcard TermText\" : \"Flashcard DefinitionText\";\n    const backButtonStyle = termIndex > 0 ? \"Button\" : \"ButtonInactive\";\n    const nextButtonStyle = termIndex < allTerms.length - 1 ? \"Button\" : \"ButtonInactive\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"IndexText\",\n          children: indexText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: flashcardStyle,\n            value: flashcardText,\n            onClick: this.flipFlashCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Last Button\",\n            className: backButtonStyle,\n            onClick: this.lastTerm,\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Next Button\",\n            className: nextButtonStyle,\n            onClick: this.nextTerm,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Shuffle Button\",\n            className: \"Button\",\n            onClick: this.shuffleTerms,\n            children: \"Shuffle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Flashcards;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js"],"names":["React","raw","Flashcards","Component","constructor","shuffleTerms","shuffledTerms","state","allTerms","totalTerms","length","i","random","Math","floor","indexTerm","setState","termIndex","onTerm","fetchDefinition","term","key","url","fetch","then","response","json","data","termDefinition","parseData","definition","definitionText","totalCounter","shortDefArray","shortdef","shortDef","j","console","log","String","flipFlashCard","onTermSide","lastTerm","nextTerm","componentDidMount","text","terms","split","render","indexText","flashcardText","flashcardStyle","backButtonStyle","nextButtonStyle"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport raw from \"./terms.txt\"\n\nclass Flashcards extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            termIndex: 0,\n            definition: \"definition\",\n            onTerm: true,\n            allTerms: []\n        }\n    }\n\n    componentDidMount() {\n        //import terms txt file\n        fetch(raw)\n            .then(response => response.text())\n            .then(text => {\n                const terms = text.split(\"\\n\");\n                this.setState({allTerms: terms})\n            })\n            .then(() => {this.shuffleTerms()})\n    }\n\n    shuffleTerms = () => {\n        const shuffledTerms = this.state.allTerms\n        const totalTerms = shuffledTerms.length\n\n        //shuffe algorithm\n        for (let i=0; i<totalTerms; i++){\n            const random = i + Math.floor(Math.random() * (totalTerms-i));\n            const indexTerm = shuffledTerms[i];\n            shuffledTerms[i] = shuffledTerms[random];\n            shuffledTerms[random] = indexTerm;\n        }\n\n        this.setState({\n            termIndex: 0,\n            allTerms: shuffledTerms,\n            onTerm: true\n        })\n    }\n\n    fetchDefinition = (term) => {\n        const key = \"cb25488e-3745-487a-8e94-4f5892774491\"\n        const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`\n    \n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                const termDefinition = this.parseData(data)\n                this.setState({definition: termDefinition})\n            })\n    }\n\n    //Fix how we parse definition data\n    \n    parseData = (data) => {\n        let definitionText = ``\n        let totalCounter = 1\n        \n        for(let i=0; i<data.length;i++){\n            const shortDefArray = data[i].shortdef\n            let shortDef = ``\n\n            for(let j=0; j<shortDefArray.length;j++){\n                console.log(shortDefArray[j])\n                shortDef += `${String(totalCounter)}. ${shortDefArray[j]}\\n`\n                totalCounter++;\n            }\n\n            definitionText += `${shortDef}`\n        }\n\n        return definitionText\n    }\n\n    flipFlashCard = () => {\n        const onTermSide = this.state.onTerm\n\n        //fetch definition\n        if (onTermSide){\n            const term = this.state.allTerms[this.state.termIndex]\n            this.fetchDefinition(term, this.state)\n        }\n\n        //flip flashcard\n        this.setState({onTerm: !onTermSide})\n    }\n\n    lastTerm = () => {\n        if (this.state.termIndex > 0){\n            this.setState({\n                termIndex: this.state.termIndex - 1,\n                onTerm: true\n            })\n        }\n    }\n\n    nextTerm = () => {\n        if (this.state.termIndex < this.state.allTerms.length - 1){\n            this.setState({\n                termIndex: this.state.termIndex + 1,\n                onTerm: true\n            })\n        }\n    }\n\n\n    render() {\n        const {termIndex, definition, onTerm, allTerms} = this.state\n\n        const indexText = `${termIndex+1} / ${allTerms.length}`\n        const flashcardText = onTerm ? allTerms[termIndex] : definition\n        const flashcardStyle = onTerm ? \"Flashcard TermText\"  : \"Flashcard DefinitionText\" \n\n        const backButtonStyle = termIndex>0 ? \"Button\" : \"ButtonInactive\"\n        const nextButtonStyle = termIndex<allTerms.length-1 ? \"Button\" : \"ButtonInactive\"\n\n        return (\n            <div className=\"Main\">\n                <label>\n                    <label className=\"IndexText\">{indexText}</label>\n\n                    <label>\n                        <textarea\n                            className={flashcardStyle}\n                            value={flashcardText}\n                            onClick={this.flipFlashCard}\n                        />\n                        {/* <button \n                            className=\"Flashcard\" \n                            onClick={this.flipFlashCard}\n                        >{flashcardText}</button> */}\n                    </label>\n                </label> \n                \n                <br/>\n\n                <div>\n                    <label>\n                        <button\n                            name=\"Last Button\"\n                            className={backButtonStyle}\n                            onClick={this.lastTerm}\n                        >Back</button>\n                    </label>\n\n                    <label>\n                        <button\n                            name=\"Next Button\"\n                            className={nextButtonStyle}\n                            onClick={this.nextTerm}\n                        >Next</button>\n                    </label>\n                </div>\n\n                <br />\n\n                <div>\n                    <label>\n                    <button\n                            name=\"Shuffle Button\"\n                            className=\"Button\"\n                            onClick={this.shuffleTerms}\n                        >Shuffle</button>\n                    </label>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Flashcards;"]},"metadata":{},"sourceType":"module"}