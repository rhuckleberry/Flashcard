{"ast":null,"code":"async function fetchDefinition(term) {\n  const key = \"cb25488e-3745-487a-8e94-4f5892774491\";\n  const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`;\n  var result = null; // try{\n  //     const response = await fetch(url)\n  //         .then()\n  //     const data = response.json()\n  //     console.log(data)\n  //     var x = parseData(\"data\", data)\n  //     console.log(\"X\", x)\n  //     return parseData(data)\n  // }catch(e){\n  //     return \"Error\"\n  // }\n  // fetch(url)\n  //     .then(response => {\n  //         if (!response.ok) {\n  //             throw response;\n  //         }\n  //         return response.json()\n  //     })\n  //     .then(data => {\n  //         const termDefinition = this.parseData(data)\n  //         this.setState({definition: termDefinition})\n  //     })\n  //     .catch(err => {\n  //         this.setState({definition: \"Error: No such word!\"})\n  //     })\n}\n\nfunction parseData(data) {\n  let definitionText = ``;\n  let totalCounter = 1;\n\n  for (let i = 0; i < data.length; i++) {\n    const shortDefArray = data[i].shortdef;\n\n    for (let j = 0; j < shortDefArray.length; j++) {\n      definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`;\n      totalCounter++;\n    }\n  }\n\n  console.log(typeof definitionText);\n  return definitionText;\n}\n\nclass Flashcard {\n  constructor(term) {\n    this.term = term;\n    this.definition = fetchDefinition(term);\n  }\n\n  get Term() {\n    return this.term;\n  }\n\n  get Definition() {\n    return this.definition;\n  }\n\n}\n\nexport default Flashcard;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js"],"names":["fetchDefinition","term","key","url","result","parseData","data","definitionText","totalCounter","i","length","shortDefArray","shortdef","j","String","console","log","Flashcard","constructor","definition","Term","Definition"],"mappings":"AACA,eAAeA,eAAf,CAA+BC,IAA/B,EAAqC;AACjC,QAAMC,GAAG,GAAG,sCAAZ;AACA,QAAMC,GAAG,GAAI,mEAAkEF,IAAK,QAAOC,GAAI,EAA/F;AACA,MAAIE,MAAM,GAAG,IAAb,CAHiC,CAKjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAED,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAIC,cAAc,GAAI,EAAtB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,IAAI,CAACI,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,UAAME,aAAa,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQG,QAA9B;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,aAAa,CAACD,MAA7B,EAAoCG,CAAC,EAArC,EAAwC;AACpCN,MAAAA,cAAc,IAAK,GAAEO,MAAM,CAACN,YAAD,CAAe,KAAIG,aAAa,CAACE,CAAD,CAAI,IAA/D;AACAL,MAAAA,YAAY;AACf;AACJ;;AAEDO,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOT,cAAnB;AAEA,SAAOA,cAAP;AACH;;AAID,MAAMU,SAAN,CAAgB;AAEZC,EAAAA,WAAW,CAACjB,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKkB,UAAL,GAAkBnB,eAAe,CAACC,IAAD,CAAjC;AACH;;AAED,MAAImB,IAAJ,GAAW;AACP,WAAO,KAAKnB,IAAZ;AACH;;AAED,MAAIoB,UAAJ,GAAiB;AACb,WAAO,KAAKF,UAAZ;AACH;;AAbW;;AAiBhB,eAAeF,SAAf","sourcesContent":["\nasync function fetchDefinition(term) {\n    const key = \"cb25488e-3745-487a-8e94-4f5892774491\"\n    const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`\n    var result = null\n\n    // try{\n    //     const response = await fetch(url)\n    //         .then()\n    //     const data = response.json()\n    //     console.log(data)\n    //     var x = parseData(\"data\", data)\n    //     console.log(\"X\", x)\n    //     return parseData(data)\n    // }catch(e){\n    //     return \"Error\"\n    // }\n\n    // fetch(url)\n    //     .then(response => {\n    //         if (!response.ok) {\n    //             throw response;\n    //         }\n    //         return response.json()\n    //     })\n    //     .then(data => {\n    //         const termDefinition = this.parseData(data)\n    //         this.setState({definition: termDefinition})\n    //     })\n    //     .catch(err => {\n    //         this.setState({definition: \"Error: No such word!\"})\n    //     })\n}\n\nfunction parseData(data) {\n    let definitionText = ``\n    let totalCounter = 1\n    \n    for(let i=0; i<data.length;i++){\n        const shortDefArray = data[i].shortdef\n\n        for(let j=0; j<shortDefArray.length;j++){\n            definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`\n            totalCounter++;\n        }\n    }\n\n    console.log(typeof(definitionText))\n\n    return definitionText\n}\n\n\n\nclass Flashcard {\n\n    constructor(term) {\n        this.term = term\n        this.definition = fetchDefinition(term)\n    }\n\n    get Term() {\n        return this.term;\n    }\n\n    get Definition() {\n        return this.definition\n    }\n\n}\n\nexport default Flashcard;"]},"metadata":{},"sourceType":"module"}