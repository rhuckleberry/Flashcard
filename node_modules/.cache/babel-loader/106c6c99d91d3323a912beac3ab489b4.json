{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js\";\nimport React from \"react\";\nimport raw from \"./terms.txt\";\n\nclass Flashcards extends React.Component {\n  constructor() {\n    super();\n\n    this.lastTerm = () => {\n      if (this.state.termIndex > 0) {\n        this.setState({\n          termIndex: this.state.termIndex - 1\n        });\n      }\n    };\n\n    this.nextTerm = () => {\n      this.setState({\n        termIndex: this.state.termIndex + 1\n      });\n    };\n\n    this.handleClick = () => {\n      this.setState(prevState => {\n        return {\n          onTerm: !prevState.onTerm\n        };\n      });\n    };\n\n    this.state = {\n      termIndex: 0,\n      definition: \"definition\",\n      onTerm: true,\n      allTerms: []\n    };\n  }\n\n  componentDidMount() {\n    //import terms txt file\n    fetch(raw).then(response => response.text()).then(text => {\n      const terms = text.split(\"\\n\");\n      this.setState({\n        allTerms: terms\n      });\n    }).then(() => {\n      //shuffle terms\n      const shuffledTerms = this.shuffleTerms(this.state.allTerms); //shuffle allTerms\n\n      this.setState({\n        allTerms: shuffledTerms\n      });\n      console.log(this.state.allTerms);\n    });\n  }\n\n  shuffleTerms(shuffledTerms) {\n    const totalTerms = shuffledTerms.length;\n\n    for (var i = 0; i < totalTerms; i++) {\n      const random = i + Math.floor(Math.random() * (totalTerms - i));\n      const indexTerm = shuffledTerms[i];\n      shuffledTerms[i] = shuffledTerms[random];\n      shuffledTerms[random] = indexTerm;\n    }\n\n    return shuffledTerms;\n  }\n\n  render() {\n    const flashcardText = this.state.onTerm ? this.state.allTerms[this.state.termIndex] : this.state.definition;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Flashcard\",\n          onClick: this.handleClick,\n          children: flashcardText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"\",\n          onClick: this.lastTerm,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"\",\n          onClick: this.nextTerm,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Flashcards;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js"],"names":["React","raw","Flashcards","Component","constructor","lastTerm","state","termIndex","setState","nextTerm","handleClick","prevState","onTerm","definition","allTerms","componentDidMount","fetch","then","response","text","terms","split","shuffledTerms","shuffleTerms","console","log","totalTerms","length","i","random","Math","floor","indexTerm","render","flashcardText"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport raw from \"./terms.txt\"\n\nclass Flashcards extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            termIndex: 0,\n            definition: \"definition\",\n            onTerm: true,\n            allTerms: []\n        }\n    }\n\n    componentDidMount() {\n        //import terms txt file\n        fetch(raw)\n            .then(response => response.text())\n            .then(text => {\n                const terms = text.split(\"\\n\");\n                this.setState({allTerms: terms})\n            })\n            .then(() => {\n                //shuffle terms\n                const shuffledTerms = this.shuffleTerms(this.state.allTerms);\n\n                //shuffle allTerms\n                this.setState({allTerms: shuffledTerms})\n                console.log(this.state.allTerms)\n            })\n    }\n\n    shuffleTerms(shuffledTerms) {\n        const totalTerms = shuffledTerms.length\n\n        for (var i=0; i<totalTerms; i++){\n            const random = i + Math.floor(Math.random() * (totalTerms-i));\n            const indexTerm = shuffledTerms[i];\n            shuffledTerms[i] = shuffledTerms[random];\n            shuffledTerms[random] = indexTerm;\n        }\n\n        return shuffledTerms;\n    }\n\n    lastTerm = () => {\n        if (this.state.termIndex > 0){\n            this.setState({termIndex: this.state.termIndex - 1})\n        }\n    }\n\n    nextTerm = () => {\n        this.setState({termIndex: this.state.termIndex + 1})\n    }\n\n    handleClick = () => {\n        this.setState(prevState => {\n            return {\n                onTerm: !prevState.onTerm\n            }\n        })\n    }\n\n    render() {\n        const flashcardText = this.state.onTerm ? \n            this.state.allTerms[this.state.termIndex] : \n            this.state.definition\n\n        return (\n            <div className=\"Main\">\n                <label>\n                    <button \n                        className=\"Flashcard\" \n                        onClick={this.handleClick}\n                    >{flashcardText}</button>\n                </label>\n\n                <label>\n                    <button\n                        className=\"\"\n                        onClick={this.lastTerm}\n                    >Back</button>\n                </label>\n\n                <label>\n                    <button\n                        className=\"\"\n                        onClick={this.nextTerm}\n                    >Next</button>\n                </label>\n            </div>\n        )\n    }\n}\n\nexport default Flashcards;"]},"metadata":{},"sourceType":"module"}