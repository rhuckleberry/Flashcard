{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js\";\nimport React from \"react\";\nimport raw from \"./terms.txt\";\n\nclass Flashcards extends React.Component {\n  constructor() {\n    super();\n\n    this.handleClick = () => {\n      this.setState(prevState => {\n        return {\n          onTerm: !prevState.onTerm\n        };\n      });\n    };\n\n    this.state = {\n      termIndex: 0,\n      definition: \"definition\",\n      onTerm: true,\n      allTerms: []\n    };\n  }\n\n  componentDidMount() {\n    //import terms txt file\n    fetch(raw).then(response => response.text()).then(text => {\n      const terms = text.split(\"\\n\");\n      this.setState({\n        allTerms: terms\n      });\n    }).then(() => {\n      //shuffle terms\n      const shuffledTerms = this.shuffleTerms(this.state.allTerms); //shuffle allTerms\n\n      this.setState({\n        allTerms: shuffledTerms\n      });\n      console.log(this.state.allTerms);\n    });\n  }\n\n  shuffleTerms(shuffledTerms) {\n    const totalTerms = shuffledTerms.length;\n\n    for (var i = 0; i < totalTerms; i++) {\n      const random = i + Math.floor(Math.random() * (totalTerms - i));\n      const indexTerm = shuffledTerms[i];\n      shuffledTerms[i] = shuffledTerms[random];\n      shuffledTerms[random] = indexTerm;\n    }\n\n    return shuffledTerms;\n  }\n\n  nextTerm() {\n    this.setState({\n      termIndex: this.state.termIndex + 1\n    });\n  }\n\n  render() {\n    const flashcardText = this.state.onTerm ? this.state.allTerms[this.state.termIndex] : this.state.definition;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Flashcard\",\n          onClick: this.handleClick,\n          children: flashcardText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Flashcards;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js"],"names":["React","raw","Flashcards","Component","constructor","handleClick","setState","prevState","onTerm","state","termIndex","definition","allTerms","componentDidMount","fetch","then","response","text","terms","split","shuffledTerms","shuffleTerms","console","log","totalTerms","length","i","random","Math","floor","indexTerm","nextTerm","render","flashcardText"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAAwC;AACpCC,EAAAA,WAAW,GAAE;AACT;;AADS,SA6CbC,WA7Ca,GA6CC,MAAM;AAChB,WAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,eAAO;AACHC,UAAAA,MAAM,EAAE,CAACD,SAAS,CAACC;AADhB,SAAP;AAGH,OAJD;AAKH,KAnDY;;AAET,SAAKC,KAAL,GAAW;AACPC,MAAAA,SAAS,EAAE,CADJ;AAEPC,MAAAA,UAAU,EAAE,YAFL;AAGPH,MAAAA,MAAM,EAAE,IAHD;AAIPI,MAAAA,QAAQ,EAAE;AAJH,KAAX;AAMH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACAC,IAAAA,KAAK,CAACb,GAAD,CAAL,CACKc,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUE,IAAI,IAAI;AACV,YAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,IAAX,CAAd;AACA,WAAKb,QAAL,CAAc;AAACM,QAAAA,QAAQ,EAAEM;AAAX,OAAd;AACH,KALL,EAMKH,IANL,CAMU,MAAM;AACR;AACA,YAAMK,aAAa,GAAG,KAAKC,YAAL,CAAkB,KAAKZ,KAAL,CAAWG,QAA7B,CAAtB,CAFQ,CAIR;;AACA,WAAKN,QAAL,CAAc;AAACM,QAAAA,QAAQ,EAAEQ;AAAX,OAAd;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWG,QAAvB;AACH,KAbL;AAcH;;AAEDS,EAAAA,YAAY,CAACD,aAAD,EAAgB;AACxB,UAAMI,UAAU,GAAGJ,aAAa,CAACK,MAAjC;;AAEA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,UAAhB,EAA4BE,CAAC,EAA7B,EAAgC;AAC5B,YAAMC,MAAM,GAAGD,CAAC,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,MAAiBH,UAAU,GAACE,CAA5B,CAAX,CAAnB;AACA,YAAMI,SAAS,GAAGV,aAAa,CAACM,CAAD,CAA/B;AACAN,MAAAA,aAAa,CAACM,CAAD,CAAb,GAAmBN,aAAa,CAACO,MAAD,CAAhC;AACAP,MAAAA,aAAa,CAACO,MAAD,CAAb,GAAwBG,SAAxB;AACH;;AAED,WAAOV,aAAP;AACH;;AAEDW,EAAAA,QAAQ,GAAG;AACP,SAAKzB,QAAL,CAAc;AAACI,MAAAA,SAAS,EAAE,KAAKD,KAAL,CAAWC,SAAX,GAAuB;AAAnC,KAAd;AACH;;AAUDsB,EAAAA,MAAM,GAAG;AACL,UAAMC,aAAa,GAAG,KAAKxB,KAAL,CAAWD,MAAX,GAClB,KAAKC,KAAL,CAAWG,QAAX,CAAoB,KAAKH,KAAL,CAAWC,SAA/B,CADkB,GAElB,KAAKD,KAAL,CAAWE,UAFf;AAIA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACI;AAAA,+BACI;AACI,UAAA,SAAS,EAAC,WADd;AAEI,UAAA,OAAO,EAAE,KAAKN,WAFlB;AAAA,oBAGE4B;AAHF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AArEmC;;AAwExC,eAAe/B,UAAf","sourcesContent":["import React from \"react\"\nimport raw from \"./terms.txt\"\n\nclass Flashcards extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            termIndex: 0,\n            definition: \"definition\",\n            onTerm: true,\n            allTerms: []\n        }\n    }\n\n    componentDidMount() {\n        //import terms txt file\n        fetch(raw)\n            .then(response => response.text())\n            .then(text => {\n                const terms = text.split(\"\\n\");\n                this.setState({allTerms: terms})\n            })\n            .then(() => {\n                //shuffle terms\n                const shuffledTerms = this.shuffleTerms(this.state.allTerms);\n\n                //shuffle allTerms\n                this.setState({allTerms: shuffledTerms})\n                console.log(this.state.allTerms)\n            })\n    }\n\n    shuffleTerms(shuffledTerms) {\n        const totalTerms = shuffledTerms.length\n\n        for (var i=0; i<totalTerms; i++){\n            const random = i + Math.floor(Math.random() * (totalTerms-i));\n            const indexTerm = shuffledTerms[i];\n            shuffledTerms[i] = shuffledTerms[random];\n            shuffledTerms[random] = indexTerm;\n        }\n\n        return shuffledTerms;\n    }\n\n    nextTerm() {\n        this.setState({termIndex: this.state.termIndex + 1})\n    }\n\n    handleClick = () => {\n        this.setState(prevState => {\n            return {\n                onTerm: !prevState.onTerm\n            }\n        })\n    }\n\n    render() {\n        const flashcardText = this.state.onTerm ? \n            this.state.allTerms[this.state.termIndex] : \n            this.state.definition\n\n        return (\n            <div className=\"Main\">\n                <label>\n                    <button\n                        className=\"Flashcard\"\n                        onClick={this.handleClick}\n                    >{flashcardText}</button>\n                </label>\n            </div>\n        )\n    }\n}\n\nexport default Flashcards;"]},"metadata":{},"sourceType":"module"}