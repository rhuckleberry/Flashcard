{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/CardDisplay.js\";\nimport React from \"react\";\nimport raw from \"./terms.txt\";\nimport Flashcard from \"./Flashcard\";\n\nclass Flashcards extends React.Component {\n  constructor() {\n    super();\n\n    this.fetchDefinition = term => {\n      const key = \"cb25488e-3745-487a-8e94-4f5892774491\";\n      const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`;\n      fetch(url).then(response => {\n        if (!response.ok) {\n          throw response;\n        }\n\n        return response.json();\n      }) // .then(data => {\n      //     const termDefinition = this.parseData(data)\n      //     this.setState({ definition: termDefinition })\n      // })\n      .then(data => {\n        const termDefinition = this.parseData(data);\n        this.setState(prevState => {\n          let newState = Object.assign({}, prevState);\n          let newDict = Object.assign({}, prevState.dictionary);\n          newDict[term] = termDefinition;\n          newState.dictionary = newDict;\n          return newState;\n        });\n      }).catch(err => {\n        this.setState(prevState => {\n          const errorDefinition = \"[Error] Not a valid english word!\";\n          let newState = Object.assign({}, prevState);\n          let newDict = Object.assign({}, prevState.dictionary);\n          newDict[term] = errorDefinition;\n          newState.dictionary = newDict;\n          return newState;\n        });\n      });\n    };\n\n    this.parseData = data => {\n      let definitionText = ``;\n      let totalCounter = 1;\n\n      for (let i = 0; i < data.length; i++) {\n        const shortDefArray = data[i].shortdef;\n\n        for (let j = 0; j < shortDefArray.length; j++) {\n          definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`;\n          totalCounter++;\n        }\n      }\n\n      return definitionText;\n    };\n\n    this.shuffleTerms = () => {\n      const shuffledTerms = this.state.allTerms;\n      const totalTerms = shuffledTerms.length; //shuffe algorithm\n\n      for (let i = 0; i < totalTerms; i++) {\n        const random = i + Math.floor(Math.random() * (totalTerms - i));\n        const indexTerm = shuffledTerms[i];\n        shuffledTerms[i] = shuffledTerms[random];\n        shuffledTerms[random] = indexTerm;\n      }\n\n      this.setState({\n        termIndex: 0,\n        allTerms: shuffledTerms,\n        onTerm: true,\n        definition: \"\"\n      });\n    };\n\n    this.flipFlashCard = () => {\n      const onTermSide = this.state.onTerm; //fetch definition\n\n      if (onTermSide) {\n        const term = this.state.allTerms[this.state.termIndex]; // this.fetchDefinition(term)\n\n        const termDefinition = this.state.dictionary[term];\n        this.setState({\n          definition: termDefinition\n        });\n      } //flip flashcard\n\n\n      this.setState({\n        onTerm: !onTermSide\n      });\n    };\n\n    this.lastTerm = () => {\n      if (this.state.termIndex > 0) {\n        this.setState({\n          termIndex: this.state.termIndex - 1,\n          onTerm: true,\n          definition: \"\"\n        });\n      }\n    };\n\n    this.nextTerm = () => {\n      if (this.state.termIndex < this.state.allTerms.length - 1) {\n        this.setState({\n          termIndex: this.state.termIndex + 1,\n          onTerm: true,\n          definition: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      termIndex: 0,\n      definition: \"\",\n      onTerm: true,\n      allTerms: [],\n      dictionary: {}\n    };\n  }\n\n  componentDidMount() {\n    //import terms txt file + shuffle\n    fetch(raw).then(response => response.text()).then(text => {\n      const terms = text.split(\"\\n\"); //trim and remove empty strings\n\n      let modTerms = [];\n\n      for (let i = 0; i < terms.length; i++) {\n        const trimTerm = terms[i].trim();\n        const capitalTerm = trimTerm.charAt(0) + trimTerm.slice(1);\n        console.log(capitalTerm);\n\n        if (capitalTerm !== \"\") {\n          modTerms.push(capitalTerm);\n        }\n      }\n\n      this.setState({\n        allTerms: modTerms\n      });\n    }).then(() => {\n      this.shuffleTerms();\n    }) //build dictionary\n    .then(() => {\n      const allTerms = this.state.allTerms;\n\n      for (let i = 0; i < allTerms.length; i++) {\n        const term = allTerms[i];\n        this.fetchDefinition(term);\n      }\n    }); //make flashcard class\n  } //try catch words like empty space - update text file?\n  //fetch definitions before flip\n  //reorder files\n  //add + delete words\n\n\n  render() {\n    const {\n      termIndex,\n      definition,\n      onTerm,\n      allTerms\n    } = this.state;\n    const indexText = `${termIndex + 1} / ${allTerms.length}`;\n    const flashcardText = onTerm ? allTerms[termIndex] : definition;\n    const flashcardStyle = onTerm ? \"Flashcard TermText\" : \"Flashcard DefinitionText\";\n    const backButtonStyle = termIndex > 0 ? \"Button\" : \"ButtonInactive\";\n    const nextButtonStyle = termIndex < allTerms.length - 1 ? \"Button\" : \"ButtonInactive\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"IndexText\",\n          children: indexText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: flashcardStyle,\n            value: flashcardText,\n            onClick: this.flipFlashCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Last Button\",\n            className: backButtonStyle,\n            onClick: this.lastTerm,\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Next Button\",\n            className: nextButtonStyle,\n            onClick: this.nextTerm,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Shuffle Button\",\n            className: \"Button\",\n            onClick: this.shuffleTerms,\n            children: \"Shuffle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Flashcards;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/CardDisplay.js"],"names":["React","raw","Flashcard","Flashcards","Component","constructor","fetchDefinition","term","key","url","fetch","then","response","ok","json","data","termDefinition","parseData","setState","prevState","newState","Object","assign","newDict","dictionary","catch","err","errorDefinition","definitionText","totalCounter","i","length","shortDefArray","shortdef","j","String","shuffleTerms","shuffledTerms","state","allTerms","totalTerms","random","Math","floor","indexTerm","termIndex","onTerm","definition","flipFlashCard","onTermSide","lastTerm","nextTerm","componentDidMount","text","terms","split","modTerms","trimTerm","trim","capitalTerm","charAt","slice","console","log","push","render","indexText","flashcardText","flashcardStyle","backButtonStyle","nextButtonStyle"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport raw from \"./terms.txt\"\nimport Flashcard from \"./Flashcard\"\n\nclass Flashcards extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            termIndex: 0,\n            definition: \"\",\n            onTerm: true,\n            allTerms: [],\n            dictionary: {}\n        }\n    }\n\n    componentDidMount() {\n        //import terms txt file + shuffle\n        fetch(raw)\n            .then(response => response.text())\n            .then(text => {\n                const terms = text.split(\"\\n\");\n\n                //trim and remove empty strings\n                let modTerms = [] \n                for (let i=0; i<terms.length; i++){\n                    const trimTerm = terms[i].trim()\n                    const capitalTerm = trimTerm.charAt(0) + trimTerm.slice(1)\n                    console.log(capitalTerm)\n                    if(capitalTerm !== \"\"){\n                        modTerms.push(capitalTerm)\n                    }\n                }\n\n                this.setState({ allTerms: modTerms })\n            })\n            .then(() => { this.shuffleTerms() })\n\n        //build dictionary\n        .then(() => {\n            const allTerms = this.state.allTerms\n            for (let i = 0; i < allTerms.length; i++) {\n                const term = allTerms[i]\n                this.fetchDefinition(term)\n            }\n\n        })\n\n        //make flashcard class\n\n    }\n\n    //try catch words like empty space - update text file?\n    //fetch definitions before flip\n    //reorder files\n    //add + delete words\n\n\n    fetchDefinition = (term) => {\n        const key = \"cb25488e-3745-487a-8e94-4f5892774491\"\n        const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`\n\n        fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw response;\n                }\n                return response.json()\n            })\n            // .then(data => {\n            //     const termDefinition = this.parseData(data)\n            //     this.setState({ definition: termDefinition })\n            // })\n            .then(data => {\n                const termDefinition = this.parseData(data)\n                this.setState(prevState => {\n                    let newState = Object.assign({}, prevState)\n                    let newDict = Object.assign({}, prevState.dictionary)\n                    newDict[term] = termDefinition\n                    newState.dictionary = newDict\n                    return (newState)\n                })\n            })\n\n            .catch(err => {\n                this.setState(prevState => {\n                    const errorDefinition = \"[Error] Not a valid english word!\"\n                    \n                    let newState = Object.assign({}, prevState)\n                    let newDict = Object.assign({}, prevState.dictionary)\n                    newDict[term] = errorDefinition\n                    newState.dictionary = newDict\n                    return (newState)\n                })\n            })\n    }\n\n    parseData = (data) => {\n        let definitionText = ``\n        let totalCounter = 1\n\n        for (let i = 0; i < data.length; i++) {\n            const shortDefArray = data[i].shortdef\n\n            for (let j = 0; j < shortDefArray.length; j++) {\n                definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`\n                totalCounter++;\n            }\n        }\n\n        return definitionText\n    }\n\n\n\n    //******make definition the terms definition\n\n\n    shuffleTerms = () => {\n        const shuffledTerms = this.state.allTerms\n        const totalTerms = shuffledTerms.length\n\n        //shuffe algorithm\n        for (let i = 0; i < totalTerms; i++) {\n            const random = i + Math.floor(Math.random() * (totalTerms - i));\n            const indexTerm = shuffledTerms[i];\n            shuffledTerms[i] = shuffledTerms[random];\n            shuffledTerms[random] = indexTerm;\n        }\n\n        this.setState({\n            termIndex: 0,\n            allTerms: shuffledTerms,\n            onTerm: true,\n            definition: \"\"\n        })\n    }\n\n\n    flipFlashCard = () => {\n        const onTermSide = this.state.onTerm\n\n        //fetch definition\n        if (onTermSide) {\n            const term = this.state.allTerms[this.state.termIndex]\n            // this.fetchDefinition(term)\n            const termDefinition = this.state.dictionary[term]\n            this.setState({definition: termDefinition})\n        }\n\n        //flip flashcard\n        this.setState({ onTerm: !onTermSide })\n    }\n\n    lastTerm = () => {\n        if (this.state.termIndex > 0) {\n            this.setState({\n                termIndex: this.state.termIndex - 1,\n                onTerm: true,\n                definition: \"\"\n            })\n        }\n    }\n\n    nextTerm = () => {\n        if (this.state.termIndex < this.state.allTerms.length - 1) {\n            this.setState({\n                termIndex: this.state.termIndex + 1,\n                onTerm: true,\n                definition: \"\"\n            })\n        }\n    }\n\n\n    render() {\n        const {termIndex, definition, onTerm, allTerms} = this.state\n\n        const indexText = `${termIndex+1} / ${allTerms.length}`\n        const flashcardText = onTerm ? allTerms[termIndex] : definition\n        const flashcardStyle = onTerm ? \"Flashcard TermText\"  : \"Flashcard DefinitionText\" \n\n        const backButtonStyle = termIndex>0 ? \"Button\" : \"ButtonInactive\"\n        const nextButtonStyle = termIndex<allTerms.length-1 ? \"Button\" : \"ButtonInactive\"\n\n        return (\n            <div className=\"Main\">\n                <label>\n                    <label className=\"IndexText\">{indexText}</label>\n\n                    <label>\n                        <textarea\n                            className={flashcardStyle}\n                            value={flashcardText}\n                            onClick={this.flipFlashCard}\n                        />\n                        {/* <button \n                            className=\"Flashcard\" \n                            onClick={this.flipFlashCard}\n                        >{flashcardText}</button> */}\n                    </label>\n                </label> \n                \n                <br/>\n\n                <div>\n                    <label>\n                        <button\n                            name=\"Last Button\"\n                            className={backButtonStyle}\n                            onClick={this.lastTerm}\n                        >Back</button>\n                    </label>\n\n                    <label>\n                        <button\n                            name=\"Next Button\"\n                            className={nextButtonStyle}\n                            onClick={this.nextTerm}\n                        >Next</button>\n                    </label>\n                </div>\n\n                <br />\n\n                <div>\n                    <label>\n                    <button\n                            name=\"Shuffle Button\"\n                            className=\"Button\"\n                            onClick={this.shuffleTerms}\n                        >Shuffle</button>\n                    </label>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Flashcards;"]},"metadata":{},"sourceType":"module"}