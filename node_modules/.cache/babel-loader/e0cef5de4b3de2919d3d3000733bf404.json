{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js\";\nimport React from \"react\";\nimport raw from \"./terms.txt\";\n\nclass Flashcards extends React.Component {\n  constructor() {\n    super();\n\n    this.shuffleTerms = () => {\n      const shuffledTerms = this.state.allTerms;\n      const totalTerms = shuffledTerms.length;\n\n      for (var i = 0; i < totalTerms; i++) {\n        const random = i + Math.floor(Math.random() * (totalTerms - i));\n        const indexTerm = shuffledTerms[i];\n        shuffledTerms[i] = shuffledTerms[random];\n        shuffledTerms[random] = indexTerm;\n      }\n\n      this.setState({\n        termIndex: 0,\n        allTerms: shuffledTerms\n      });\n    };\n\n    this.fetchDefinition = () => {// const api = \"https://www.dictionaryapi.com/api/v3/references/collegiate/json/voluminous?key=your-api-key\"\n      // fetch(api)\n      //     .then(response => response.json())\n      //     .then(term => console.log(term.id))\n    };\n\n    this.flipFlashCard = () => {\n      const onTermSide = this.state.onTerm; //fetch definition\n\n      if (onTermSide) {\n        this.fetchDefinition();\n      } //flip flashcard\n\n\n      this.setState({\n        onTerm: !onTermSide\n      });\n    };\n\n    this.lastTerm = () => {\n      if (this.state.termIndex > 0) {\n        this.setState({\n          termIndex: this.state.termIndex - 1\n        });\n      }\n    };\n\n    this.nextTerm = () => {\n      if (this.state.termIndex < this.state.allTerms.length - 1) {\n        this.setState({\n          termIndex: this.state.termIndex + 1\n        });\n      }\n    };\n\n    this.state = {\n      termIndex: 0,\n      definition: \"definition\",\n      onTerm: true,\n      allTerms: []\n    };\n  }\n\n  componentDidMount() {\n    //import terms txt file\n    fetch(raw).then(response => response.text()).then(text => {\n      const terms = text.split(\"\\n\");\n      this.setState({\n        allTerms: terms\n      });\n    }).then(() => {\n      //shuffle terms\n      this.shuffleTerms();\n    });\n  }\n\n  render() {\n    const {\n      termIndex,\n      definition,\n      onTerm,\n      allTerms\n    } = this.state;\n    const indexText = `${termIndex + 1} / ${allTerms.length}`;\n    const flashcardText = onTerm ? allTerms[termIndex] : definition;\n    const backButtonStyle = termIndex > 0 ? \"Button\" : \"ButtonInactive\";\n    const nextButtonStyle = termIndex < allTerms.length - 1 ? \"Button\" : \"ButtonInactive\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"IndexText\",\n          children: indexText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Flashcard\",\n          onClick: this.flipFlashCard,\n          children: flashcardText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Last Button\",\n            className: backButtonStyle,\n            onClick: this.lastTerm,\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Next Button\",\n            className: nextButtonStyle,\n            onClick: this.nextTerm,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"Shuffle Button\",\n            className: \"Button\",\n            onClick: this.shuffleTerms,\n            children: \"Shuffle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Flashcards;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js"],"names":["React","raw","Flashcards","Component","constructor","shuffleTerms","shuffledTerms","state","allTerms","totalTerms","length","i","random","Math","floor","indexTerm","setState","termIndex","fetchDefinition","flipFlashCard","onTermSide","onTerm","lastTerm","nextTerm","definition","componentDidMount","fetch","then","response","text","terms","split","render","indexText","flashcardText","backButtonStyle","nextButtonStyle"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport raw from \"./terms.txt\"\n\nclass Flashcards extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            termIndex: 0,\n            definition: \"definition\",\n            onTerm: true,\n            allTerms: []\n        }\n    }\n\n    componentDidMount() {\n        //import terms txt file\n        fetch(raw)\n            .then(response => response.text())\n            .then(text => {\n                const terms = text.split(\"\\n\");\n                this.setState({allTerms: terms})\n            })\n            .then(() => {\n                //shuffle terms\n                this.shuffleTerms();\n            })\n    }\n\n    shuffleTerms = () => {\n        const shuffledTerms = this.state.allTerms\n        const totalTerms = shuffledTerms.length\n\n        for (var i=0; i<totalTerms; i++){\n            const random = i + Math.floor(Math.random() * (totalTerms-i));\n            const indexTerm = shuffledTerms[i];\n            shuffledTerms[i] = shuffledTerms[random];\n            shuffledTerms[random] = indexTerm;\n        }\n\n        this.setState({\n            termIndex: 0,\n            allTerms: shuffledTerms\n        })\n    }\n\n    fetchDefinition = () => {\n        // const api = \"https://www.dictionaryapi.com/api/v3/references/collegiate/json/voluminous?key=your-api-key\"\n        // fetch(api)\n        //     .then(response => response.json())\n        //     .then(term => console.log(term.id))\n    }\n\n    flipFlashCard = () => {\n        const onTermSide = this.state.onTerm\n\n        //fetch definition\n        if (onTermSide){\n            this.fetchDefinition();\n        }\n\n\n        //flip flashcard\n        this.setState({onTerm: !onTermSide})\n    }\n\n    lastTerm = () => {\n        if (this.state.termIndex > 0){\n            this.setState({termIndex: this.state.termIndex - 1})\n        }\n    }\n\n    nextTerm = () => {\n        if (this.state.termIndex < this.state.allTerms.length - 1){\n            this.setState({termIndex: this.state.termIndex + 1})\n        }\n    }\n\n\n    render() {\n        const {termIndex, definition, onTerm, allTerms} = this.state\n\n        const indexText = `${termIndex+1} / ${allTerms.length}`\n        const flashcardText = onTerm ? allTerms[termIndex] : definition\n\n        const backButtonStyle = termIndex>0 ? \"Button\" : \"ButtonInactive\"\n        const nextButtonStyle = termIndex<allTerms.length-1 ? \"Button\" : \"ButtonInactive\"\n\n        return (\n            <div className=\"Main\">\n                <label>\n                    <label className=\"IndexText\">{indexText}</label>\n                    <button \n                        className=\"Flashcard\" \n                        onClick={this.flipFlashCard}\n                    >{flashcardText}</button>\n                </label> \n                \n                <br/>\n\n                <div>\n                    <label>\n                        <button\n                            name=\"Last Button\"\n                            className={backButtonStyle}\n                            onClick={this.lastTerm}\n                        >Back</button>\n                    </label>\n\n                    <label>\n                        <button\n                            name=\"Next Button\"\n                            className={nextButtonStyle}\n                            onClick={this.nextTerm}\n                        >Next</button>\n                    </label>\n                </div>\n\n                <br />\n\n                <div>\n                    <label>\n                    <button\n                            name=\"Shuffle Button\"\n                            className=\"Button\"\n                            onClick={this.shuffleTerms}\n                        >Shuffle</button>\n                    </label>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Flashcards;"]},"metadata":{},"sourceType":"module"}