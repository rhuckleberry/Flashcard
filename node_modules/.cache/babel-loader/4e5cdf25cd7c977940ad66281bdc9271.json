{"ast":null,"code":"class Flashcard {\n  constructor(term) {\n    this.parseData = data => {\n      let definitionText = ``;\n      let totalCounter = 1;\n\n      for (let i = 0; i < data.length; i++) {\n        const shortDefArray = data[i].shortdef;\n\n        for (let j = 0; j < shortDefArray.length; j++) {\n          definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`;\n          totalCounter++;\n        }\n      }\n\n      return definitionText;\n    };\n\n    this.term = term;\n    this.definition = this.fetchDefinition(term);\n  }\n\n  get Term() {\n    return this.term;\n  }\n\n  get Definition() {\n    return this.definition;\n  }\n\n  async fetchDefinition(term) {\n    const key = \"cb25488e-3745-487a-8e94-4f5892774491\";\n    const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n    } catch (e) {} // fetch(url)\n    //     .then(response => {\n    //         if (!response.ok) {\n    //             throw response;\n    //         }\n    //         return response.json()\n    //     })\n    //     .then(data => {\n    //         const termDefinition = this.parseData(data)\n    //         this.setState({definition: termDefinition})\n    //     })\n    //     .catch(err => {\n    //         this.setState({definition: \"Error: No such word!\"})\n    //     })\n\n  }\n\n}\n\nexport default Flashcard;","map":{"version":3,"sources":["/Users/rhuck/Documents/CompProjects/react_projects/flashcard/src/Flashcard.js"],"names":["Flashcard","constructor","term","parseData","data","definitionText","totalCounter","i","length","shortDefArray","shortdef","j","String","definition","fetchDefinition","Term","Definition","key","url","response","fetch","json","e"],"mappings":"AAAA,MAAMA,SAAN,CAAgB;AACZC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAA,SAwClBC,SAxCkB,GAwCLC,IAAD,IAAU;AAClB,UAAIC,cAAc,GAAI,EAAtB;AACA,UAAIC,YAAY,GAAG,CAAnB;;AAEA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,IAAI,CAACI,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,cAAME,aAAa,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQG,QAA9B;;AAEA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,aAAa,CAACD,MAA7B,EAAoCG,CAAC,EAArC,EAAwC;AACpCN,UAAAA,cAAc,IAAK,GAAEO,MAAM,CAACN,YAAD,CAAe,KAAIG,aAAa,CAACE,CAAD,CAAI,IAA/D;AACAL,UAAAA,YAAY;AACf;AACJ;;AAED,aAAOD,cAAP;AACH,KAtDiB;;AACd,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKW,UAAL,GAAkB,KAAKC,eAAL,CAAqBZ,IAArB,CAAlB;AACH;;AAED,MAAIa,IAAJ,GAAW;AACP,WAAO,KAAKb,IAAZ;AACH;;AAED,MAAIc,UAAJ,GAAiB;AACb,WAAO,KAAKH,UAAZ;AACH;;AAED,QAAMC,eAAN,CAAsBZ,IAAtB,EAA4B;AACxB,UAAMe,GAAG,GAAG,sCAAZ;AACA,UAAMC,GAAG,GAAI,mEAAkEhB,IAAK,QAAOe,GAAI,EAA/F;;AAEA,QAAG;AACC,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,YAAMd,IAAI,GAAG,MAAMe,QAAQ,CAACE,IAAT,EAAnB;AACH,KAHD,CAGC,OAAMC,CAAN,EAAQ,CAER,CATuB,CAWxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;;AAvCW;;AA2DhB,eAAetB,SAAf","sourcesContent":["class Flashcard {\n    constructor(term) {\n        this.term = term\n        this.definition = this.fetchDefinition(term)\n    }\n\n    get Term() {\n        return this.term;\n    }\n\n    get Definition() {\n        return this.definition\n    }\n\n    async fetchDefinition(term) {\n        const key = \"cb25488e-3745-487a-8e94-4f5892774491\"\n        const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${term}?key=${key}`\n\n        try{\n            const response = await fetch(url)\n            const data = await response.json()\n        }catch(e){\n\n        }\n\n        // fetch(url)\n        //     .then(response => {\n        //         if (!response.ok) {\n        //             throw response;\n        //         }\n        //         return response.json()\n        //     })\n        //     .then(data => {\n        //         const termDefinition = this.parseData(data)\n        //         this.setState({definition: termDefinition})\n        //     })\n        //     .catch(err => {\n        //         this.setState({definition: \"Error: No such word!\"})\n        //     })\n    }\n\n    parseData = (data) => {\n        let definitionText = ``\n        let totalCounter = 1\n        \n        for(let i=0; i<data.length;i++){\n            const shortDefArray = data[i].shortdef\n\n            for(let j=0; j<shortDefArray.length;j++){\n                definitionText += `${String(totalCounter)}. ${shortDefArray[j]}\\n`\n                totalCounter++;\n            }\n        }\n\n        return definitionText\n    }\n\n}\n\nexport default Flashcard;"]},"metadata":{},"sourceType":"module"}